"""
Build file for /
"""
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@aspect_bazel_lib//lib:directory_path.bzl", "directory_path")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("//angular-app/tools:typescript.bzl", "ts_project")
load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("//angular-app/tools:defs.bzl", "get_directories")
load("@npm//:html-insert-assets/package_json.bzl", html_insert_assets_bin = "bin")

package(default_visibility = ["//:__subpackages__"])

#ngc rules
directory_path(
    name = "ngc_entrypoint",
    directory = "//:node_modules/@angular/compiler-cli/dir",
    path = "bundles/src/bin/ngc.js",
)

js_binary(
    name = "ngc",
    data = ["//:node_modules/@angular/compiler-cli"],
    entry_point = ":ngc_entrypoint",
    visibility = ["//visibility:public"],
)

# html-insert-assets rules
directory_path(
    name = "html_insert_assets_entrypoint",
    directory = ":node_modules/html-insert-assets/dir",
    path = "dist/run.js",
)

js_binary(
    name = "html_insert_assets",
    data = [":node_modules/html-insert-assets"],
    entry_point = ":html_insert_assets_entrypoint",
)

# history-server rules
directory_path(
    name = "history_server_entrypoint",
    directory = "//:node_modules/history-server/dir",
    path = "modules/cli.js",
)

js_binary(
    name = "dev_server_binary",
    args = ["--port", "5656", "-a", ".."],
    chdir = package_name(),
    data = [
        "//:node_modules/history-server",
        ":bundle_dir",
        ":inject_scripts_for_dev",
        "//:node_modules/express",
        "//:node_modules/glob",
        "//:node_modules/http-proxy",
    ],
    entry_point = ":history_server_entrypoint",
    # entry_point = "node_modules/history-server/modules/cli.js",
    log_level = "debug",
)

# tsconfig / tsc
ts_config(
    name = "tsconfig",
    src = "tsconfig.bazel.json",
    deps = [
        ":tsconfig.json",
    ],
)

ts_project(
    name = "angular_app_tsc",
    srcs = [
        ":src/main.dev.ts",
        ":src/main.prod.ts",
    ],
    tsconfig = ":tsconfig",
    deps = [
        "//:node_modules/@angular/core",
        "//:node_modules/@angular/platform-browser",
        "//:node_modules/@angular/platform-browser-dynamic",
        "//angular-app/src/app",
    ],
)

# Bundling / serving
_ASSETS = [
    # This label references an output of the "styles" sass_binary above.
    # ":styles.css",
    # "favicon.ico",

    # We load zone.js outside the bundle. That's because it's a "pollyfill"
    # which speculates that such features might be available in a browser.
    # Also it's tricky to configure dead code elimination to understand that
    # zone.js is used, given that we don't have any import statement that
    # imports from it.
    #"//:node_modules/zone.js/dist/zone.min.js",
]

esbuild(
    name = "bundle_dev",
    srcs = [
        ":angular_app_tsc",
    ],
    config = ":esbuild.config.mjs",
    entry_points = [
        ":src/main.dev.ts",
    ],
    format = "esm",
    output_dir = True,
    sourcemap = "",
    splitting = True,
    deps = [
        ":angular_app_tsc",
        "//:node_modules/@angular/compiler-cli",
        "//:node_modules/esbuild-plugin-babel",
        "//:node_modules/rxjs",
    ],
)

# Get only the output directory from the esbuild bundle (remove the metadata.json file)
get_directories(
    name = "bundle_dir",
    srcs = ":bundle_dev",
    deps = [
        "bundle_dev",
    ],
)

# Add the assets and bundled JS files to the index.html. Uses index.base.html and creates an index.html file
html_insert_assets_bin.html_insert_assets(
    name = "inject_scripts_for_dev",
    srcs = [
        ":src/index.base.html",
        ":bundle_dir",
    ] + _ASSETS,
    chdir = package_name(),
    outs = ["index.html"],
    log_level = "debug",
    args = [
        "--html=src/index.base.html",
        "--out=index.html",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        "--scripts --module $(execpath :bundle_dir)/main.dev.js",
    ],
)
